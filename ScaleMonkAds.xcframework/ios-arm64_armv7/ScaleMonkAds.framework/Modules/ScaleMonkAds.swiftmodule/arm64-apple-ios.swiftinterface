// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ScaleMonkAds
import CoreTelephony
import Foundation
import RxSwift
import SMAnalytics
import SMDeviceInfo
@_exported import ScaleMonkAds
import Swift
import WebKit
import Willow
public enum UserType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case payingUserType
  case nonPayingUserType
  case invalidUserType
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [ScaleMonkAds.UserType]
  public static var allCases: [ScaleMonkAds.UserType] {
    get
  }
}
public protocol MediationSDK {
  func initialize() -> RxSwift.Completable
  func show(adType: ScaleMonkAds.AdType, viewController: UIKit.UIViewController, tag: Swift.String)
  func isReadyToShow(adType: ScaleMonkAds.AdType, tag: Swift.String) -> Swift.Bool
  func showBanner(viewController: UIKit.UIViewController, bannerView: ScaleMonkAds.SMBannerView, tag: Swift.String)
  func stopLoadingBanners()
  func getCurrentGDPRConsentStatus() -> Swift.Bool
  func addAnalytics(analytics: ScaleMonkAds.Analytics)
  func setHasGDPRConsent(status: Swift.Bool)
  func setUserCantGiveGDPRConsent(status: Swift.Bool)
  func setIsApplicationChildDirected(childDirectedTreatment: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class ScaleMonkAdsImplementation : ScaleMonkAds.MediationSDK {
  public func initialize() -> RxSwift.Completable
  public func show(adType: ScaleMonkAds.AdType, viewController: UIKit.UIViewController, tag: Swift.String)
  public func isReadyToShow(adType: ScaleMonkAds.AdType, tag: Swift.String) -> Swift.Bool
  public func addAnalytics(analytics: ScaleMonkAds.Analytics)
  public func showBanner(viewController: UIKit.UIViewController, bannerView: ScaleMonkAds.SMBannerView, tag: Swift.String)
  public func stopLoadingBanners()
  public func getCurrentGDPRConsentStatus() -> Swift.Bool
  public func setHasGDPRConsent(status: Swift.Bool)
  public func setIsApplicationChildDirected(childDirectedTreatment status: Swift.Bool)
  public func setUserCantGiveGDPRConsent(status: Swift.Bool)
  public func disposeAndDisable()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WaterfallExecution {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ScaleMonkAdsBuilder {
  public var appliedConfiguration: ScaleMonkAds.AdsConfig
  public func addAnalytics(analytics: ScaleMonkAds.Analytics)
  public func withDeviceInfoService(_ deviceInfoService: ScaleMonkAds.DeviceInfoService) -> ScaleMonkAds.ScaleMonkAdsBuilder
  public func rewardedVideoAdListener(_ rewardedVideoAdEventListener: ScaleMonkAds.RewardedVideoAdEventListener) -> ScaleMonkAds.ScaleMonkAdsBuilder
  public func interstitialListener(_ interstitialEventListener: ScaleMonkAds.InterstitialEventListener) -> ScaleMonkAds.ScaleMonkAdsBuilder
  public func bannerListener(_ bannerEventListener: ScaleMonkAds.BannerEventListener) -> ScaleMonkAds.ScaleMonkAdsBuilder
  public func withConfigurationReloader(_ configurationReloader: ScaleMonkAds.ConfigurationReloader) -> ScaleMonkAds.ScaleMonkAdsBuilder
  public func withPolicies(_ adPolicies: [ScaleMonkAds.AdPolicy]) -> ScaleMonkAds.ScaleMonkAdsBuilder
  public func forceConfigurationReload() -> RxSwift.Completable
  public func build() -> ScaleMonkAds.MediationSDK
  @objc deinit
}
public struct EventParams {
}
public enum DisplayFailedReason : Swift.String, Swift.CaseIterable {
  public static var allCases: [ScaleMonkAds.DisplayFailedReason] {
    get
  }
  @available(*, deprecated, message: "Set it as nil instead.")
  case undefinedReason
  case success
  case adsDisplayDisabled
  case videoDisabled
  case videoAdNetError
  case videoFirstSessionDisabled
  case videoToPayingUserDisabled
  case regularVideoToPayingUser
  case videoMaxPerSession
  case videoDidNotEarnReward
  case interstitialDisabled
  case interstitialAdNetError
  case interstitialFirstSessionDisabled
  case interstitialToPayingUserDisabled
  case interstitialMaxPerSession
  case interstitialMinInterval
  case regularInterstitialToPayingUser
  case bannerDisabled
  case bannerFirstSessionDisabled
  case bannerMaxPerSession
  case bannerToPayingUserDisabled
  case noInternetConnection
  case noAdAvailable
  case emptyWaterfall
  case unknownReason
  case coppaRegulations
  case primaryWaterfallInOneTimeAd
  case noAdReadyToShow
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [ScaleMonkAds.DisplayFailedReason]
}
extension EventParams : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension DisplayFailedReason : Swift.Codable {
}
public protocol SMDeviceInfoBridge {
  static func isSmart() -> Swift.Bool
  static func advertisingId() -> Swift.String?
  static func appBundle() -> Swift.String
  static func appVersion() -> Swift.String
  static func appBuildNumber() -> Swift.String
  static func systemVersion() -> Swift.String
  static func languageCode() -> Swift.String
  static func regionCode() -> Swift.String
  static func deviceModel() -> Swift.String
  static func deviceType() -> Swift.String
  static func mobileCarrierName() -> Swift.String
  static func deviceName() -> Swift.String
  static func vendorIdentifier() -> Swift.String
  static func connectionTypeName() -> Swift.String
  static func timeZoneName() -> Swift.String
}
extension SMDeviceInfo : ScaleMonkAds.SMDeviceInfoBridge {
  public static func appBuildNumber() -> Swift.String
}
public func safePerformObjC<Element>(block: () -> Element, onError: ((Foundation.NSException) -> Swift.Void)? = nil, _ file: Swift.StaticString = #file, _ line: Swift.UInt = #line) -> Element?
public struct NSExceptionError : Swift.Error {
  public let exception: Foundation.NSException
  public init(exception: Foundation.NSException)
}
public class InitializeWaterfalls {
  public init(waterfallsCache: ScaleMonkAds.WaterfallCache, waterfallExecution: ScaleMonkAds.WaterfallExecution)
  @objc deinit
}
public struct WaterfallEntry : Swift.Equatable {
  public let adType: ScaleMonkAds.AdType
  public let placementId: Swift.String
  public let providerId: Swift.String
  public let providerType: ScaleMonkAds.ProviderType
  public let bid: ScaleMonkAds.Bid?
  public let timeoutInMilliseconds: Swift.Int
  public static func == (a: ScaleMonkAds.WaterfallEntry, b: ScaleMonkAds.WaterfallEntry) -> Swift.Bool
}
public protocol ExchangeDeviceInfoBridge {
  static func deviceUserAgent() -> Swift.String!
  static func wirelessIpv4() -> Swift.String!
}
public enum AdsStatus : Swift.String, Swift.Codable, Swift.CaseIterable, Swift.Equatable {
  case active
  case inactive
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [ScaleMonkAds.AdsStatus]
  public static var allCases: [ScaleMonkAds.AdsStatus] {
    get
  }
}
@_hasMissingDesignatedInitializers public class LegacyProviderFactory {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InitializeReloader {
  @objc deinit
}
public typealias RegulationStatus = Swift.Bool
public enum Regulation : Swift.Int {
  case hasGDPRConsent
  case isUserCantGiveGDPRConsent
  case isApplicationChildDirected
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct AdsConfig : Swift.Equatable, Swift.Codable {
  public static func == (lhs: ScaleMonkAds.AdsConfig, rhs: ScaleMonkAds.AdsConfig) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol Analytics {
  func sendEvent(eventName: Swift.String, eventParams: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class ProviderData {
  public func toProviderData(adType: ScaleMonkAds.AdType) -> [Swift.String : Any]
  public func toJson(adType: ScaleMonkAds.AdType) -> [Swift.String : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ScaleMonkAnalytics : ScaleMonkAds.Analytics {
  public func sendEvent(eventName: Swift.String, eventParams: [Swift.String : Any])
  @objc deinit
}
public protocol ViewAdapter {
  func showVideo(_ provider: ScaleMonkAds.SMProviderProtocol, _ attrProvider: ScaleMonkAds.SMWaterfallEntry, _ tag: Swift.String) -> Swift.Bool
  func showInterstitial(_ provider: ScaleMonkAds.SMProviderProtocol, _ attrProvider: ScaleMonkAds.SMWaterfallEntry, _ tag: Swift.String) -> Swift.Bool
  func showBanner(_ provider: ScaleMonkAds.SMProviderProtocol, _ attrProvider: ScaleMonkAds.SMWaterfallEntry, _ tag: Swift.String) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class EmitterActions {
  @objc deinit
}
extension WaterfallEntry {
  public func toAttrProvider(provider: ScaleMonkAds.SMProviderProtocol) -> ScaleMonkAds.SMWaterfallEntry
}
public protocol DeviceInfoService {
  func get() -> RxSwift.Single<ScaleMonkAds.DeviceInfo>
}
public struct Bid : Swift.Equatable {
  public static func == (a: ScaleMonkAds.Bid, b: ScaleMonkAds.Bid) -> Swift.Bool
}
public struct DeviceInfo : Swift.Equatable {
  public static func == (a: ScaleMonkAds.DeviceInfo, b: ScaleMonkAds.DeviceInfo) -> Swift.Bool
}
public struct Payload : Swift.Equatable {
  public static func == (a: ScaleMonkAds.Payload, b: ScaleMonkAds.Payload) -> Swift.Bool
}
public enum ExchangeEndpoints : Swift.String {
  case merge
  case config
  case impression
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum ExchangeErrorCode : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case serverError
  case emptyResponse
  case providerNotFound
  case unsupportedAdType
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [ScaleMonkAds.ExchangeErrorCode]
  public static var allCases: [ScaleMonkAds.ExchangeErrorCode] {
    get
  }
}
public struct AuctionRequestEvent {
}
public struct ExchangeLatencySuccessEvent {
}
public struct ExchangeDisabledEvent {
}
public struct ExchangeLatencyFailedEvent {
}
public struct RtbBidRequestEvent {
}
public struct RtbBidLatencyEvent {
}
@_hasMissingDesignatedInitializers public class DeviceInfoWrapper : ScaleMonkAds.DeviceInfoService {
  public func get() -> RxSwift.Single<ScaleMonkAds.DeviceInfo>
  @objc deinit
}
public struct DeviceInfoRaw : Swift.Equatable {
  public static func == (a: ScaleMonkAds.DeviceInfoRaw, b: ScaleMonkAds.DeviceInfoRaw) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class SMDeviceInfoService {
  public func get() -> ScaleMonkAds.DeviceInfoRaw
  @objc deinit
}
public struct CadsRequestEvent {
}
public struct CadsLatencySuccessEvent {
}
public struct CadsLatencyFailedEvent {
}
public enum ProviderType {
  case realTimeBidding
  case regular
  public static func == (a: ScaleMonkAds.ProviderType, b: ScaleMonkAds.ProviderType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct NotificationEventParams {
}
public enum NotificationEventType {
  case viewClick
  case viewStart
  case viewFail
  case viewClose
  case videoRewarded
  case videoNotRewarded
  case notValidType
  case viewCompleted
  case ready
  case notReady
  public static func == (a: ScaleMonkAds.NotificationEventType, b: ScaleMonkAds.NotificationEventType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct ExceptionEvent {
}
@_hasMissingDesignatedInitializers public class BannerRotationService {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class InitializeReCacheService {
  @objc deinit
}
public enum WaterfallType : Swift.CaseIterable {
  case primary
  case fallback
  public static func == (a: ScaleMonkAds.WaterfallType, b: ScaleMonkAds.WaterfallType) -> Swift.Bool
  public typealias AllCases = [ScaleMonkAds.WaterfallType]
  public static var allCases: [ScaleMonkAds.WaterfallType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class Waterfall {
  @objc deinit
}
@objc public protocol RewardedVideoAdEventListener {
  @objc optional func onRewardedClick(tag: Swift.String)
  @objc optional func onRewardedViewStart(tag: Swift.String)
  @objc optional func onRewardedFinishWithNoReward(tag: Swift.String)
  @objc optional func onRewardedFinishWithReward(tag: Swift.String)
  @objc optional func onRewardedFail(tag: Swift.String)
  @objc optional func onRewardedReady()
  @objc optional func onRewardedNotReady()
}
@objc public protocol InterstitialEventListener {
  @objc optional func onInterstitialClick(tag: Swift.String)
  @objc optional func onInterstitialFail(tag: Swift.String)
  @objc optional func onInterstitialView(tag: Swift.String)
  @objc optional func onInterstitialViewStart(tag: Swift.String)
  @objc optional func onInterstitialReady()
  @objc optional func onInterstitialNotReady()
}
@objc public protocol BannerEventListener {
  @objc optional func onBannerFail(tag: Swift.String)
  @objc optional func onBannerCompleted(tag: Swift.String)
}
@_hasMissingDesignatedInitializers public class InitializeNotifyExchangeEventsService {
  @objc deinit
}
public enum AdShowEvent : Swift.Equatable {
  case viewStarted
  case viewError(ScaleMonkAds.ViewErrorType)
  case viewClicked
  case videoRewarded
  case videoNotRewarded
  case viewClosed
  case viewRequest
  case viewCompleted
  public static func == (a: ScaleMonkAds.AdShowEvent, b: ScaleMonkAds.AdShowEvent) -> Swift.Bool
}
public enum ViewErrorType : Swift.Equatable {
  case immediateProviderError
  case bannerFaildToCache
  case providerViewError(Swift.String)
  case providerNotFound
  case caughtErrorWhileShowing
  case noViewEvents
  public static func == (a: ScaleMonkAds.ViewErrorType, b: ScaleMonkAds.ViewErrorType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class InitializeOneTimeAd {
  @objc deinit
}
@objc public protocol AdPolicy {
}
public protocol ShowAdPolicy : ScaleMonkAds.AdPolicy {
  func shouldShowAd(adType: ScaleMonkAds.AdType, waterfallType: ScaleMonkAds.WaterfallType, providerType: ScaleMonkAds.ProviderType, adsConfig: ScaleMonkAds.AdsConfig) -> ScaleMonkAds.ShowAdPolicyResult
}
public protocol AdsEnabledPolicy : ScaleMonkAds.AdPolicy {
  func adsEnabled(adType: ScaleMonkAds.AdType, adsConfig: ScaleMonkAds.AdsConfig) -> ScaleMonkAds.ShowAdPolicyResult
}
public enum ShowAdPolicyResult : Swift.Equatable {
  case success
  case rejected(ScaleMonkAds.DisplayFailedReason)
  public static func == (a: ScaleMonkAds.ShowAdPolicyResult, b: ScaleMonkAds.ShowAdPolicyResult) -> Swift.Bool
}
public enum DisplayEventType {
  case failed
  case started
  public static func == (a: ScaleMonkAds.DisplayEventType, b: ScaleMonkAds.DisplayEventType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct DisplayEvent {
}
public struct DisplayFailedEvent {
}
public struct DisplayOpportunityEvent {
}
public struct MissedOpportunityEvent {
}
@objc public class ScaleMonkAdsSDK : ObjectiveC.NSObject {
  @objc public init(applicationId: Swift.String, extraParameters: [Swift.String : Any]? = nil)
  @objc public func initialize(_ done: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func forceReloadConfiguration()
  @objc public func addVideoListener(_ listener: ScaleMonkAds.RewardedVideoAdEventListener)
  @objc public func addInterstitialListener(_ listener: ScaleMonkAds.InterstitialEventListener)
  @objc public func addBannerListener(_ listener: ScaleMonkAds.BannerEventListener)
  @objc public func clearVideoListeners()
  @objc public func clearInterstitialListeners()
  @objc public func clearBannerListeners()
  @objc public func showInterstitialAd(viewController: UIKit.UIViewController, tag: Swift.String = "undefined")
  @objc public func showRewardedVideoAd(viewController: UIKit.UIViewController, tag: Swift.String = "undefined")
  @objc public func showBannerAd(viewController: UIKit.UIViewController, bannerView: ScaleMonkAds.SMBannerView, tag: Swift.String = "undefined")
  @objc public func stopLoadingBanners()
  @objc public func setIsApplicationChildDirected(childDirectedTreatment: Swift.Bool)
  @objc public func setUserCantGiveGDPRConsent(status: Swift.Bool)
  @objc public func setHasGDPRConsent(status: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
@objc public class AnalyticsListenerWrapper : ObjectiveC.NSObject, ScaleMonkAds.Analytics {
  public init(smAnalytics: ScaleMonkAds.SMAnalyticsListener)
  public func sendEvent(eventName: Swift.String, eventParams: [Swift.String : Any])
  @objc deinit
  @objc override dynamic public init()
}
@objc public class RewardedVideoAdEventListenerWrapper : ObjectiveC.NSObject, ScaleMonkAds.RewardedVideoAdEventListener {
  @objc public init(listener: ScaleMonkAds.SMRewardedVideoAdEventListener)
  @objc public func onRewardedClick(tag: Swift.String)
  @objc public func onRewardedFail(tag: Swift.String)
  @objc public func onRewardedFinishWithNoReward(tag: Swift.String)
  @objc public func onRewardedFinishWithReward(tag: Swift.String)
  @objc public func onRewardedViewStart(tag: Swift.String)
  @objc public func onRewardedReady()
  @objc public func onRewardedNotReady()
  @objc deinit
  @objc override dynamic public init()
}
@objc public class InterstitialAdEventListenerWrapper : ObjectiveC.NSObject, ScaleMonkAds.InterstitialEventListener {
  @objc public init(listener: ScaleMonkAds.SMInterstitialAdEventListener)
  @objc public func onInterstitialClick(tag: Swift.String)
  @objc public func onInterstitialFail(tag: Swift.String)
  @objc public func onInterstitialView(tag: Swift.String)
  @objc public func onInterstitialViewStart(tag: Swift.String)
  @objc public func onInterstitialReady()
  @objc public func onInterstitialNotReady()
  @objc deinit
  @objc override dynamic public init()
}
@objc public class BannerEventListenerWrapper : ObjectiveC.NSObject, ScaleMonkAds.BannerEventListener {
  @objc public init(listener: ScaleMonkAds.SMBannerAdEventListener)
  @objc public func onBannerFail(tag: Swift.String)
  @objc public func onBannerCompleted(tag: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
public enum AdType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case banner
  case interstitial
  case rewardedVideo
  public typealias RawValue = Swift.String
  public typealias AllCases = [ScaleMonkAds.AdType]
  public static var allCases: [ScaleMonkAds.AdType] {
    get
  }
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol ConfigurationService {
  func getAdsConfiguration() -> RxSwift.Single<ScaleMonkAds.AdsConfigResponse>
  func isLatest(configuration: ScaleMonkAds.AdsConfig) -> RxSwift.Single<ScaleMonkAds.HasConfigChangedResponse>
}
public enum HasConfigChangedResponse {
  case changed(ScaleMonkAds.AdsConfig)
  case unchanged(ScaleMonkAds.AdsConfig)
  case failed(Swift.Error)
}
public protocol ConfigurationReloader {
  func evaluateReloadPolicy(builder: ScaleMonkAds.ScaleMonkAdsBuilder) -> RxSwift.Completable
  func start(builder: ScaleMonkAds.ScaleMonkAdsBuilder)
}
public struct CadsRequest : Swift.Equatable {
  public static func == (a: ScaleMonkAds.CadsRequest, b: ScaleMonkAds.CadsRequest) -> Swift.Bool
}
public enum AdsConfigResponse {
  case success(ScaleMonkAds.AdsConfig)
  case failed(Swift.Error)
}
public enum AdsProvider : Swift.Int, Swift.Codable, Swift.CaseIterable, Swift.Hashable {
  case invalid
  case adColony
  case admob
  case amazon
  case applovin
  case applovinMediation
  case chartBoost
  case facebook
  case fyber
  case inmobi
  case ironSource
  case mintegral
  case mopub
  case mopubMediation
  case myTarget
  case smaato
  case tapJoy
  case tikTok
  case unityAds
  case vungle
  case dummy
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [ScaleMonkAds.AdsProvider]
  public static var allCases: [ScaleMonkAds.AdsProvider] {
    get
  }
}
public enum AdsProviderTestMode : Swift.String, Swift.Codable, Swift.CaseIterable, Swift.Equatable {
  case fill
  case timeout
  case noFill
  case invalid
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [ScaleMonkAds.AdsProviderTestMode]
  public static var allCases: [ScaleMonkAds.AdsProviderTestMode] {
    get
  }
}
@_hasMissingDesignatedInitializers public class InitializeProviders {
  @objc deinit
}
public enum AdCacheResult {
  case success
  case failed(_: ScaleMonkAds.CacheFail)
  case timeout
  case alreadyCached(_: ScaleMonkAds.AlreadyCached)
}
public struct AlreadyCached {
}
public struct CacheFail {
}
extension Observable {
  public func asCompletable() -> RxSwift.Completable
  public static func fromCallable<T>(_ action: @escaping () throws -> T) -> RxSwift.Observable<T>
  public static func fromCallable<T>(_ action: @escaping () throws -> Swift.Void) -> RxSwift.Observable<T>
  public func safeSubscribe()
}
extension Disposable {
  public func addToSubscriptions()
}
extension PrimitiveSequence where Trait == RxSwift.CompletableTrait, Element == Swift.Never {
  public static func fromCallable(_ action: @escaping () throws -> Swift.Void) -> RxSwift.Completable
  public func safeSubscribe()
}
extension PrimitiveSequence {
  public static func fromCallable<T>(_ action: @escaping () throws -> T) -> RxSwift.Single<T>
}
public protocol ProviderService {
  func cache(waterfallEntry: ScaleMonkAds.WaterfallEntry) -> RxSwift.Single<ScaleMonkAds.AdCacheResult>
  func hasCache(waterfallEntry: ScaleMonkAds.WaterfallEntry) -> Swift.Bool
  func show(viewAdapter: ScaleMonkAds.ViewAdapter, waterfallEntry: ScaleMonkAds.WaterfallEntry, tag: Swift.String) -> RxSwift.Observable<ScaleMonkAds.AdShowEvent>
  func getName() -> Swift.String
  func closeBanner(placementId: Swift.String)
  func supportsAdType(adType: ScaleMonkAds.AdType) -> Swift.Bool
  func setRegulationStatus(regulation: ScaleMonkAds.Regulation, status: ScaleMonkAds.RegulationStatus)
}
public protocol WaterfallProvider : ScaleMonkAds.ProviderService {
  func setTestMode(configuration: ScaleMonkAds.AdsProviderTestMode)
}
@_hasMissingDesignatedInitializers @objc public class CoppaCompliancePolicy : ObjectiveC.NSObject, ScaleMonkAds.AdsEnabledPolicy {
  @objc public static func enabledByDefault() -> ScaleMonkAds.CoppaCompliancePolicy
  @objc public static func disabledByDefault() -> ScaleMonkAds.CoppaCompliancePolicy
  public func adsEnabled(adType: ScaleMonkAds.AdType, adsConfig: ScaleMonkAds.AdsConfig) -> ScaleMonkAds.ShowAdPolicyResult
  public func enable()
  public func disable()
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class CompliancePolicyService {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WaterfallCache {
  @objc deinit
}
extension ScaleMonkAds.UserType : Swift.Equatable {}
extension ScaleMonkAds.UserType : Swift.Hashable {}
extension ScaleMonkAds.UserType : Swift.RawRepresentable {}
extension ScaleMonkAds.DisplayFailedReason : Swift.Equatable {}
extension ScaleMonkAds.DisplayFailedReason : Swift.Hashable {}
extension ScaleMonkAds.DisplayFailedReason : Swift.RawRepresentable {}
extension ScaleMonkAds.WaterfallType : Swift.Equatable {}
extension ScaleMonkAds.WaterfallType : Swift.Hashable {}
extension ScaleMonkAds.ProviderType : Swift.Equatable {}
extension ScaleMonkAds.ProviderType : Swift.Hashable {}
extension ScaleMonkAds.AdType : Swift.Equatable {}
extension ScaleMonkAds.AdType : Swift.Hashable {}
extension ScaleMonkAds.AdType : Swift.RawRepresentable {}
extension ScaleMonkAds.AdsStatus : Swift.Hashable {}
extension ScaleMonkAds.AdsStatus : Swift.RawRepresentable {}
extension ScaleMonkAds.Regulation : Swift.Equatable {}
extension ScaleMonkAds.Regulation : Swift.Hashable {}
extension ScaleMonkAds.Regulation : Swift.RawRepresentable {}
extension ScaleMonkAds.AdsProviderTestMode : Swift.Hashable {}
extension ScaleMonkAds.AdsProviderTestMode : Swift.RawRepresentable {}
extension ScaleMonkAds.ExchangeEndpoints : Swift.Equatable {}
extension ScaleMonkAds.ExchangeEndpoints : Swift.Hashable {}
extension ScaleMonkAds.ExchangeEndpoints : Swift.RawRepresentable {}
extension ScaleMonkAds.ExchangeErrorCode : Swift.Equatable {}
extension ScaleMonkAds.ExchangeErrorCode : Swift.Hashable {}
extension ScaleMonkAds.ExchangeErrorCode : Swift.RawRepresentable {}
extension ScaleMonkAds.NotificationEventType : Swift.Equatable {}
extension ScaleMonkAds.NotificationEventType : Swift.Hashable {}
extension ScaleMonkAds.DisplayEventType : Swift.Equatable {}
extension ScaleMonkAds.DisplayEventType : Swift.Hashable {}
extension ScaleMonkAds.AdsProvider : Swift.RawRepresentable {}
